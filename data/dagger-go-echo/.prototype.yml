title: |
  [Go] Dagger でテストを呼び出す
description: |
  Dagger は CI/CD をポータブルにするツールです。
  スクリプトを Docker コンテナに閉じ込めることで、どこでも実行できるようになります。

  気になったのでサンプルアプリを作ってみました。
published: '2025-07-05'

units:
  - image: size=(min) flow.png

  - title: 公式サイト
    links:
      - title: https://dagger.io/
        url: https://dagger.io/

  - title: インストール
    description: |
      Mac では Homebrew でインストールできます。

    terminal: |
      $ brew install dagger/tap/dagger

      $ dagger version
      dagger v0.18.12 (docker-image://registry.dagger.io/engine:v0.18.12) darwin/arm64

  - title: サンプルアプリ
    description: |
      Go でサンプルアプリを作りました。

      ディレクトリ構造は次の通りです。
    terminal: |
      $ tree -a -L 2
      .
      ├── .dagger
      │   ├── dagger.gen.go
      │   ├── go.mod
      │   ├── internal
      │   └── main.go          // Dagger のスクリプト
      ├── .gitignore
      ├── dagger.json          // Dagger の設定ファイル
      ├── db
      ├── docker-compose.yml
      ├── Dockerfile           // Dockerfile
      ├── go.mod
      └── main.go
  
  - description: |
      .dagger/main.go に Dagger のスクリプトを記述します。

  - code:
      open: .dagger/main.go
      include:
        - .dagger
        - .dagger/.gitattributes
        - .dagger/.gitignore
        - .dagger/dagger.gen.go
        - .dagger/go.mod
        - .dagger/main.go
        - .gitignore
        - .air.toml
        - dagger.json
        - docker-compose.yml
        - Dockerfile
        - go.mod
        - go.sum
        - main.go
        - main_test.go
        - sqlc.yaml
        # - db
        - db/db.go
        - db/main.go
        - db/models.go
        - db/queries.sql
        - db/queries.sql.go
        # - migrations
        - migrations/20250629061144_create_tasks_table.sql
        # - testdata
        - testdata/00001_seed_tasks_table.sql

      units:
        - description: |
            アプリのコンテナです

            Dagger ではベースイメージを指定してゼロから組み立てるケースが多いですが、私は Dockerfile ベースにしました
          links:
            - title: ドキュメント
              url: https://docs.dagger.io/features/programmability
          mark: .dagger/main.go:11
        - description: |
            MySQL のコンテナです。テストで使います
          mark: .dagger/main.go:23
        
        - title: リント
          description: |
            `dagger call lint` で呼び出せます
          mark: .dagger/main.go:32
        
        - title: テスト
          description: |
            `dagger call test` で呼び出せます
          mark: .dagger/main.go:40
          
        - description: |
            テストする前に、マグレーションをします
          mark: .dagger/main.go:47


  - title: テストを呼び出す
    description: |
      `dagger call test` で呼び出せます
    terminal: |
      $ dagger call test

      ▶ connect 0.2s
      ▶ load module: . 2.3s

      ● app: App! 0.0s
      ▶ .test: String! 34.1s

      ● parsing command line arguments 0.0s

      === RUN   TestGetTasksHandler
      --- PASS: TestGetTasksHandler (0.00s)
      PASS
      ok  	github.com/enuesaa/lab/data/dagger-go-echo	0.003s
      ?   	github.com/enuesaa/lab/data/dagger-go-echo/db	[no test files]
  
  - image: size=(min) test.gif

  - title: GitHub Actions
    description: |
      Actions で dagger call するには `dagger/dagger-for-github` を使います。
    links:
      - title: dagger/dagger-for-github
        url: https://github.com/dagger/dagger-for-github
  - inline:
      open: actions.yml

  - title: 感想
    description: |
      往々にして、テストのセットアップ処理やコマンドは長くなりがちであり、それらが CI に散らばるのを課題に感じてました。
      その意味で、Dagger を使えば DRY になります。

      一方で、何をどこまで Dagger 経由にするかは考える必要がありそうで、
      例えば `go fmt ./...` は、ふつうに直接呼び出したほうが楽でした。
